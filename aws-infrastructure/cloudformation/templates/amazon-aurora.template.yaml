AWSTemplateFormatVersion: "2010-09-09"
Description: "Deploy an Aurora database cluster into an existing VPC"
Parameters:
  DBInstanceClass:
    Type: String
    Default: 'db.t2.small'
  AvailabilityZones:
    Description: The list of Availability Zones in which DB instances in the cluster can be created.
    Type: List<AWS::EC2::AvailabilityZone::Name>
  PrivateSubnet1ID:
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet2ID:
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet3ID:
    Type: AWS::EC2::Subnet::Id
  EKSNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
  Cluster:
    Type: String
    Default: development
  Environment:
    Type: String
    Default: dev
  VPCID:
    Type: AWS::EC2::VPC::Id
Resources:

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: !Ref 'AWS::StackName'
      SubnetIds:
        - !Ref PrivateSubnet1ID
        - !Ref PrivateSubnet2ID
        - !Ref PrivateSubnet3ID

  ClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Ref 'AWS::StackName'
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        SourceSecurityGroupId: !Ref EKSNodeSecurityGroup
      - IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        SourceSecurityGroupId: !Ref BastionSecurityGroup
      VpcId: !Ref VPCID

  DBClusterParameterGroup:
    Type: AWS::RDS::DBClusterParameterGroup
    Properties:
      Description: !Ref AWS::StackName
      Family: 'aurora-mysql5.7'
      Parameters:
        character_set_client: 'utf8'
        character_set_connection: 'utf8'
        character_set_database: 'utf8'
        character_set_filesystem: 'utf8'
        character_set_results: 'utf8'
        character_set_server: 'utf8mb4'
        collation_connection: 'utf8_general_ci'
        collation_server: 'utf8mb4_general_ci'
        lower_case_table_names: 1


# Create an Aurora RDS Cluster
  DBCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      AvailabilityZones: !Ref AvailabilityZones
      DBClusterIdentifier: !Join
        - '-'
        - - !Ref Environment
          - !Ref Cluster
          - 'pricer-central'
      DBClusterParameterGroupName: !Ref DBClusterParameterGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      Engine: 'aurora-mysql'
      MasterUsername: !Join ['', ['{{resolve:secretsmanager:', !Ref DBRDSSecret, ':SecretString:username}}' ]]
      MasterUserPassword: !Join ['', ['{{resolve:secretsmanager:', !Ref DBRDSSecret, ':SecretString:password}}' ]]
      VpcSecurityGroupIds:
      - !Ref ClusterSecurityGroup

  DBParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: !Ref AWS::StackName
      Family: 'aurora-mysql5.7'
      Parameters:
        max_allowed_packet: 128000000
        sql_mode: 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION'

  DBInstanceA:
    Type: AWS::RDS::DBInstance
    Properties:
      AllowMajorVersionUpgrade: false
      AutoMinorVersionUpgrade: true
      CopyTagsToSnapshot: true
      DBClusterIdentifier: !Ref DBCluster
      DBInstanceClass: !Ref DBInstanceClass
      DBParameterGroupName: !Ref DBParameterGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      Engine: 'aurora-mysql'

  DBInstanceB:
    Type: AWS::RDS::DBInstance
    Properties:
      AllowMajorVersionUpgrade: false
      AutoMinorVersionUpgrade: true
      CopyTagsToSnapshot: true
      DBClusterIdentifier: !Ref DBCluster
      DBInstanceClass: !Ref DBInstanceClass
      DBParameterGroupName: !Ref DBParameterGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      Engine: 'aurora-mysql'

# Create a secret with the username admin and a randomly generated password in JSON.
  DBRDSSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: 'This is the secret for my RDS instance'
      GenerateSecretString:
        SecretStringTemplate: '{"username": "pricer_admin"}'
        GenerateStringKey: 'password'
        PasswordLength: 16
        ExcludeCharacters: '"@/\'

Outputs:
  DBRDSSecret:
    Value: !Ref DBRDSSecret
  StackName:
      Description: 'Stack name.'
      Value: !Sub '${AWS::StackName}'
  ClusterName:
    Description: 'The name of the cluster.'
    Value: !Ref DBCluster
    Export:
      Name: !Sub '${AWS::StackName}-ClusterName'
  DNSName:
    Description: 'The connection endpoint for the DB cluster.'
    Value: !GetAtt 'DBCluster.Endpoint.Address'
    Export:
      Name: !Sub '${AWS::StackName}-DNSName'
  ReadDNSName:
    Description: 'The reader endpoint for the DB cluster.'
    Value: !GetAtt 'DBCluster.ReadEndpoint.Address'
    Export:
      Name: !Sub '${AWS::StackName}-ReadDNSName'